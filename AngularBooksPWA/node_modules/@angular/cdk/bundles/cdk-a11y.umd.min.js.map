{"version":3,"file":"cdk-a11y.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/cdk/a11y/aria-describer/aria-reference.ts","../../src/cdk/a11y/aria-describer/aria-describer.ts","../../src/cdk/a11y/interactivity-checker/interactivity-checker.ts","../../src/cdk/a11y/live-announcer/live-announcer-token.ts","../../src/cdk/a11y/live-announcer/live-announcer.ts","../../src/cdk/a11y/focus-monitor/focus-monitor.ts","../../src/cdk/a11y/fake-mousedown.ts","../../src/cdk/a11y/key-manager/list-key-manager.ts","../../src/cdk/a11y/key-manager/activedescendant-key-manager.ts","../../src/cdk/a11y/key-manager/focus-key-manager.ts","../../src/cdk/a11y/focus-trap/focus-trap.ts","../../src/cdk/a11y/a11y-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** IDs are deliminated by an empty space, as per the spec. */\nconst ID_DELIMINATOR = ' ';\n\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function addAriaReferencedId(el: Element, attr: string, id: string) {\n  const ids = getAriaReferenceIds(el, attr);\n  if (ids.some(existingId => existingId.trim() == id.trim())) { return; }\n  ids.push(id.trim());\n\n  el.setAttribute(attr, ids.join(ID_DELIMINATOR));\n}\n\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function removeAriaReferencedId(el: Element, attr: string, id: string) {\n  const ids = getAriaReferenceIds(el, attr);\n  const filteredIds = ids.filter(val => val != id.trim());\n\n  el.setAttribute(attr, filteredIds.join(ID_DELIMINATOR));\n}\n\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function getAriaReferenceIds(el: Element, attr: string): string[] {\n  // Get string array of all individual ids (whitespace deliminated) in the attribute value\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport {addAriaReferencedId, getAriaReferenceIds, removeAriaReferencedId} from './aria-reference';\n\n\n/**\n * Interface used to register message elements and keep a count of how many registrations have\n * the same message and the reference to the message element used for the `aria-describedby`.\n */\nexport interface RegisteredMessage {\n  /** The element containing the message. */\n  messageElement: Element;\n\n  /** The number of elements that reference this message element via `aria-describedby`. */\n  referenceCount: number;\n}\n\n/** ID used for the body container where all messages are appended. */\nexport const MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n\n/** ID prefix used for each created message element. */\nexport const CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n\n/** Attribute given to each host element that is described by a message element. */\nexport const CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n\n/** Global incremental identifier for each registered message element. */\nlet nextId = 0;\n\n/** Global map of all registered message elements that have been placed into the document. */\nconst messageRegistry = new Map<string, RegisteredMessage>();\n\n/** Container for all registered messages. */\nlet messagesContainer: HTMLElement | null = null;\n\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class AriaDescriber implements OnDestroy {\n  private _document: Document;\n\n  constructor(@Inject(DOCUMENT) _document: any) {\n    this._document = _document;\n  }\n\n  /**\n   * Adds to the host element an aria-describedby reference to a hidden element that contains\n   * the message. If the same message has already been registered, then it will reuse the created\n   * message element.\n   */\n  describe(hostElement: Element, message: string) {\n    if (!this._canBeDescribed(hostElement, message)) {\n      return;\n    }\n\n    if (!messageRegistry.has(message)) {\n      this._createMessageElement(message);\n    }\n\n    if (!this._isElementDescribedByMessage(hostElement, message)) {\n      this._addMessageReference(hostElement, message);\n    }\n  }\n\n  /** Removes the host element's aria-describedby reference to the message element. */\n  removeDescription(hostElement: Element, message: string) {\n    if (!this._canBeDescribed(hostElement, message)) {\n      return;\n    }\n\n    if (this._isElementDescribedByMessage(hostElement, message)) {\n      this._removeMessageReference(hostElement, message);\n    }\n\n    const registeredMessage = messageRegistry.get(message);\n    if (registeredMessage && registeredMessage.referenceCount === 0) {\n      this._deleteMessageElement(message);\n    }\n\n    if (messagesContainer && messagesContainer.childNodes.length === 0) {\n      this._deleteMessagesContainer();\n    }\n  }\n\n  /** Unregisters all created message elements and removes the message container. */\n  ngOnDestroy() {\n    const describedElements =\n        this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`);\n\n    for (let i = 0; i < describedElements.length; i++) {\n      this._removeCdkDescribedByReferenceIds(describedElements[i]);\n      describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n\n    if (messagesContainer) {\n      this._deleteMessagesContainer();\n    }\n\n    messageRegistry.clear();\n  }\n\n  /**\n   * Creates a new element in the visually hidden message container element with the message\n   * as its content and adds it to the message registry.\n   */\n  private _createMessageElement(message: string) {\n    const messageElement = this._document.createElement('div');\n    messageElement.setAttribute('id', `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`);\n    messageElement.appendChild(this._document.createTextNode(message)!);\n\n    this._createMessagesContainer();\n    messagesContainer!.appendChild(messageElement);\n\n    messageRegistry.set(message, {messageElement, referenceCount: 0});\n  }\n\n  /** Deletes the message element from the global messages container. */\n  private _deleteMessageElement(message: string) {\n    const registeredMessage = messageRegistry.get(message);\n    const messageElement = registeredMessage && registeredMessage.messageElement;\n    if (messagesContainer && messageElement) {\n      messagesContainer.removeChild(messageElement);\n    }\n    messageRegistry.delete(message);\n  }\n\n  /** Creates the global container for all aria-describedby messages. */\n  private _createMessagesContainer() {\n    if (!messagesContainer) {\n      const preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID);\n\n      // When going from the server to the client, we may end up in a situation where there's\n      // already a container on the page, but we don't have a reference to it. Clear the\n      // old container so we don't get duplicates. Doing this, instead of emptying the previous\n      // container, should be slightly faster.\n      if (preExistingContainer) {\n        preExistingContainer.parentNode!.removeChild(preExistingContainer);\n      }\n\n      messagesContainer = this._document.createElement('div');\n      messagesContainer.id = MESSAGES_CONTAINER_ID;\n      messagesContainer.setAttribute('aria-hidden', 'true');\n      messagesContainer.style.display = 'none';\n      this._document.body.appendChild(messagesContainer);\n    }\n  }\n\n  /** Deletes the global messages container. */\n  private _deleteMessagesContainer() {\n    if (messagesContainer && messagesContainer.parentNode) {\n      messagesContainer.parentNode.removeChild(messagesContainer);\n      messagesContainer = null;\n    }\n  }\n\n  /** Removes all cdk-describedby messages that are hosted through the element. */\n  private _removeCdkDescribedByReferenceIds(element: Element) {\n    // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n    const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby')\n        .filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n    element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n  }\n\n  /**\n   * Adds a message reference to the element using aria-describedby and increments the registered\n   * message's reference count.\n   */\n  private _addMessageReference(element: Element, message: string) {\n    const registeredMessage = messageRegistry.get(message)!;\n\n    // Add the aria-describedby reference and set the\n    // describedby_host attribute to mark the element.\n    addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n\n    registeredMessage.referenceCount++;\n  }\n\n  /**\n   * Removes a message reference from the element using aria-describedby\n   * and decrements the registered message's reference count.\n   */\n  private _removeMessageReference(element: Element, message: string) {\n    const registeredMessage = messageRegistry.get(message)!;\n    registeredMessage.referenceCount--;\n\n    removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n  }\n\n  /** Returns true if the element has been described by the provided message ID. */\n  private _isElementDescribedByMessage(element: Element, message: string): boolean {\n    const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n    const registeredMessage = messageRegistry.get(message);\n    const messageId = registeredMessage && registeredMessage.messageElement.id;\n\n    return !!messageId && referenceIds.indexOf(messageId) != -1;\n  }\n\n  /** Determines whether a message can be described on a particular element. */\n  private _canBeDescribed(element: Element, message: string): boolean {\n    return element.nodeType === this._document.ELEMENT_NODE && message != null &&\n        !!`${message}`.trim();\n  }\n\n}\n\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport function ARIA_DESCRIBER_PROVIDER_FACTORY(parentDispatcher: AriaDescriber, _document: any) {\n  return parentDispatcher || new AriaDescriber(_document);\n}\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport const ARIA_DESCRIBER_PROVIDER = {\n  // If there is already an AriaDescriber available, use that. Otherwise, provide a new one.\n  provide: AriaDescriber,\n  deps: [\n    [new Optional(), new SkipSelf(), AriaDescriber],\n    DOCUMENT as InjectionToken<any>\n  ],\n  useFactory: ARIA_DESCRIBER_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Injectable} from '@angular/core';\n\n\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\n@Injectable({providedIn: 'root'})\nexport class InteractivityChecker {\n\n  constructor(private _platform: Platform) {}\n\n  /**\n   * Gets whether an element is disabled.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is disabled.\n   */\n  isDisabled(element: HTMLElement): boolean {\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\n    // a form control inside of a disabled form, but should capture the most common cases.\n    return element.hasAttribute('disabled');\n  }\n\n  /**\n   * Gets whether an element is visible for the purposes of interactivity.\n   *\n   * This will capture states like `display: none` and `visibility: hidden`, but not things like\n   * being clipped by an `overflow: hidden` parent or being outside the viewport.\n   *\n   * @returns Whether the element is visible.\n   */\n  isVisible(element: HTMLElement): boolean {\n    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n  }\n\n  /**\n   * Gets whether an element can be reached via Tab key.\n   * Assumes that the element has already been checked with isFocusable.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is tabbable.\n   */\n  isTabbable(element: HTMLElement): boolean {\n    // Nothing is tabbable on the the server 😎\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    const frameElement = getFrameElement(getWindow(element));\n\n    if (frameElement) {\n      const frameType = frameElement && frameElement.nodeName.toLowerCase();\n\n      // Frame elements inherit their tabindex onto all child elements.\n      if (getTabIndexValue(frameElement) === -1) {\n        return false;\n      }\n\n      // Webkit and Blink consider anything inside of an <object> element as non-tabbable.\n      if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {\n        return false;\n      }\n\n      // Webkit and Blink disable tabbing to an element inside of an invisible frame.\n      if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {\n        return false;\n      }\n\n    }\n\n    let nodeName = element.nodeName.toLowerCase();\n    let tabIndexValue = getTabIndexValue(element);\n\n    if (element.hasAttribute('contenteditable')) {\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'iframe') {\n      // The frames may be tabbable depending on content, but it's not possibly to reliably\n      // investigate the content of the frames.\n      return false;\n    }\n\n    if (nodeName === 'audio') {\n      if (!element.hasAttribute('controls')) {\n        // By default an <audio> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK) {\n        // In Blink <audio controls> elements are always tabbable.\n        return true;\n      }\n    }\n\n    if (nodeName === 'video') {\n      if (!element.hasAttribute('controls') && this._platform.TRIDENT) {\n        // In Trident a <video> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK || this._platform.FIREFOX) {\n        // In Chrome and Firefox <video controls> elements are always tabbable.\n        return true;\n      }\n    }\n\n    if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {\n      // In all Blink and WebKit based browsers <object> elements are never tabbable.\n      return false;\n    }\n\n    // In iOS the browser only considers some specific elements as tabbable.\n    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n      return false;\n    }\n\n    return element.tabIndex >= 0;\n  }\n\n  /**\n   * Gets whether an element can be focused by the user.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is focusable.\n   */\n  isFocusable(element: HTMLElement): boolean {\n    // Perform checks in order of left to most expensive.\n    // Again, naive approach that does not capture many edge cases and browser quirks.\n    return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);\n  }\n\n}\n\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n */\nfunction getFrameElement(window: Window) {\n  try {\n    return window.frameElement as HTMLElement;\n  } catch {\n    return null;\n  }\n}\n\n/** Checks whether the specified element has any geometry / rectangles. */\nfunction hasGeometry(element: HTMLElement): boolean {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight ||\n      (typeof element.getClientRects === 'function' && element.getClientRects().length));\n}\n\n/** Gets whether an element's  */\nfunction isNativeFormElement(element: Node) {\n  let nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' ||\n      nodeName === 'select' ||\n      nodeName === 'button' ||\n      nodeName === 'textarea';\n}\n\n/** Gets whether an element is an `<input type=\"hidden\">`. */\nfunction isHiddenInput(element: HTMLElement): boolean {\n  return isInputElement(element) && element.type == 'hidden';\n}\n\n/** Gets whether an element is an anchor that has an href attribute. */\nfunction isAnchorWithHref(element: HTMLElement): boolean {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n\n/** Gets whether an element is an input element. */\nfunction isInputElement(element: HTMLElement): element is HTMLInputElement {\n  return element.nodeName.toLowerCase() == 'input';\n}\n\n/** Gets whether an element is an anchor element. */\nfunction isAnchorElement(element: HTMLElement): element is HTMLAnchorElement {\n  return element.nodeName.toLowerCase() == 'a';\n}\n\n/** Gets whether an element has a valid tabindex. */\nfunction hasValidTabIndex(element: HTMLElement): boolean {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n\n  let tabIndex = element.getAttribute('tabindex');\n\n  // IE11 parses tabindex=\"\" as the value \"-32768\"\n  if (tabIndex == '-32768') {\n    return false;\n  }\n\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n */\nfunction getTabIndexValue(element: HTMLElement): number | null {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  }\n\n  // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n  const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n\n/** Checks whether the specified element is potentially tabbable on iOS */\nfunction isPotentiallyTabbableIOS(element: HTMLElement): boolean {\n  let nodeName = element.nodeName.toLowerCase();\n  let inputType = nodeName === 'input' && (element as HTMLInputElement).type;\n\n  return inputType === 'text'\n      || inputType === 'password'\n      || nodeName === 'select'\n      || nodeName === 'textarea';\n}\n\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n */\nfunction isPotentiallyFocusable(element: HTMLElement): boolean {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return isNativeFormElement(element) ||\n      isAnchorWithHref(element) ||\n      element.hasAttribute('contenteditable') ||\n      hasValidTabIndex(element);\n}\n\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\nfunction getWindow(node: HTMLElement): Window {\n  // ownerDocument is null if `node` itself *is* a document.\n  return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n// The token for the live announcer element is defined in a separate file from LiveAnnouncer\n// as a workaround for https://github.com/angular/angular/issues/22559\n\nexport const LIVE_ANNOUNCER_ELEMENT_TOKEN =\n    new InjectionToken<HTMLElement | null>('liveAnnouncerElement', {\n      providedIn: 'root',\n      factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY,\n    });\n\n/** @docs-private */\nexport function LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY(): null {\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ContentObserver} from '@angular/cdk/observers';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Injectable,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Provider,\n  SkipSelf,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {LIVE_ANNOUNCER_ELEMENT_TOKEN} from './live-announcer-token';\n\n\n/** Possible politeness levels. */\nexport type AriaLivePoliteness = 'off' | 'polite' | 'assertive';\n\n@Injectable({providedIn: 'root'})\nexport class LiveAnnouncer implements OnDestroy {\n  private _liveElement: HTMLElement;\n  private _document: Document;\n  private _previousTimeout?: number;\n\n  constructor(\n      @Optional() @Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN) elementToken: any,\n      private _ngZone: NgZone,\n      @Inject(DOCUMENT) _document: any) {\n\n    // We inject the live element and document as `any` because the constructor signature cannot\n    // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n    // a class decorator causes TypeScript to preserve the constructor signature types.\n    this._document = _document;\n    this._liveElement = elementToken || this._createLiveElement();\n  }\n\n  /**\n   * Announces a message to screenreaders.\n   * @param message Message to be announced to the screenreader.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string): Promise<void>;\n\n  /**\n   * Announces a message to screenreaders.\n   * @param message Message to be announced to the screenreader.\n   * @param politeness The politeness of the announcer element.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string, politeness?: AriaLivePoliteness): Promise<void>;\n\n  /**\n   * Announces a message to screenreaders.\n   * @param message Message to be announced to the screenreader.\n   * @param duration Time in milliseconds after which to clear out the announcer element. Note\n   *   that this takes effect after the message has been added to the DOM, which can be up to\n   *   100ms after `announce` has been called.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string, duration?: number): Promise<void>;\n\n  /**\n   * Announces a message to screenreaders.\n   * @param message Message to be announced to the screenreader.\n   * @param politeness The politeness of the announcer element.\n   * @param duration Time in milliseconds after which to clear out the announcer element. Note\n   *   that this takes effect after the message has been added to the DOM, which can be up to\n   *   100ms after `announce` has been called.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string, politeness?: AriaLivePoliteness, duration?: number): Promise<void>;\n\n  announce(message: string, ...args: any[]): Promise<void> {\n    let politeness: AriaLivePoliteness;\n    let duration: number;\n\n    if (args.length === 1 && typeof args[0] === 'number') {\n      duration = args[0];\n    } else {\n      [politeness, duration] = args;\n    }\n\n    this.clear();\n    clearTimeout(this._previousTimeout);\n\n    // TODO: ensure changing the politeness works on all environments we support.\n    this._liveElement.setAttribute('aria-live', politeness! || 'polite');\n\n    // This 100ms timeout is necessary for some browser + screen-reader combinations:\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n    //   second time without clearing and then using a non-zero delay.\n    // (using JAWS 17 at time of this writing).\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        clearTimeout(this._previousTimeout);\n        this._previousTimeout = setTimeout(() => {\n          this._liveElement.textContent = message;\n          resolve();\n\n          if (typeof duration === 'number') {\n            this._previousTimeout = setTimeout(() => this.clear(), duration);\n          }\n        }, 100);\n      });\n    });\n  }\n\n  /**\n   * Clears the current text from the announcer element. Can be used to prevent\n   * screen readers from reading the text out again while the user is going\n   * through the page landmarks.\n   */\n  clear() {\n    if (this._liveElement) {\n      this._liveElement.textContent = '';\n    }\n  }\n\n  ngOnDestroy() {\n    clearTimeout(this._previousTimeout);\n\n    if (this._liveElement && this._liveElement.parentNode) {\n      this._liveElement.parentNode.removeChild(this._liveElement);\n      this._liveElement = null!;\n    }\n  }\n\n  private _createLiveElement(): HTMLElement {\n    const elementClass = 'cdk-live-announcer-element';\n    const previousElements = this._document.getElementsByClassName(elementClass);\n    const liveEl = this._document.createElement('div');\n\n    // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n    for (let i = 0; i < previousElements.length; i++) {\n      previousElements[i].parentNode!.removeChild(previousElements[i]);\n    }\n\n    liveEl.classList.add(elementClass);\n    liveEl.classList.add('cdk-visually-hidden');\n\n    liveEl.setAttribute('aria-atomic', 'true');\n    liveEl.setAttribute('aria-live', 'polite');\n\n    this._document.body.appendChild(liveEl);\n\n    return liveEl;\n  }\n\n}\n\n\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\n@Directive({\n  selector: '[cdkAriaLive]',\n  exportAs: 'cdkAriaLive',\n})\nexport class CdkAriaLive implements OnDestroy {\n  /** The aria-live politeness level to use when announcing messages. */\n  @Input('cdkAriaLive')\n  get politeness(): AriaLivePoliteness { return this._politeness; }\n  set politeness(value: AriaLivePoliteness) {\n    this._politeness = value === 'polite' || value === 'assertive' ? value : 'off';\n    if (this._politeness === 'off') {\n      if (this._subscription) {\n        this._subscription.unsubscribe();\n        this._subscription = null;\n      }\n    } else if (!this._subscription) {\n      this._subscription = this._ngZone.runOutsideAngular(() => {\n        return this._contentObserver\n          .observe(this._elementRef)\n          .subscribe(() => {\n            // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n            const elementText = this._elementRef.nativeElement.textContent;\n\n            // The `MutationObserver` fires also for attribute\n            // changes which we don't want to announce.\n            if (elementText !== this._previousAnnouncedText) {\n              this._liveAnnouncer.announce(elementText, this._politeness);\n              this._previousAnnouncedText = elementText;\n            }\n          });\n      });\n    }\n  }\n  private _politeness: AriaLivePoliteness = 'off';\n\n  private _previousAnnouncedText?: string;\n  private _subscription: Subscription | null;\n\n  constructor(private _elementRef: ElementRef, private _liveAnnouncer: LiveAnnouncer,\n              private _contentObserver: ContentObserver, private _ngZone: NgZone) {}\n\n  ngOnDestroy() {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n}\n\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport function LIVE_ANNOUNCER_PROVIDER_FACTORY(\n    parentAnnouncer: LiveAnnouncer, liveElement: any, _document: any, ngZone: NgZone) {\n  return parentAnnouncer || new LiveAnnouncer(liveElement, ngZone, _document);\n}\n\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport const LIVE_ANNOUNCER_PROVIDER: Provider = {\n  // If there is already a LiveAnnouncer available, use that. Otherwise, provide a new one.\n  provide: LiveAnnouncer,\n  deps: [\n    [new Optional(), new SkipSelf(), LiveAnnouncer],\n    [new Optional(), new Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN)],\n    DOCUMENT,\n    NgZone,\n  ],\n  useFactory: LIVE_ANNOUNCER_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  SkipSelf,\n} from '@angular/core';\nimport {Observable, of as observableOf, Subject, Subscription} from 'rxjs';\n\n\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\nexport const TOUCH_BUFFER_MS = 650;\n\n\nexport type FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program' | null;\n\n\n/**\n * Corresponds to the options that can be passed to the native `focus` event.\n * via https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus\n */\nexport interface FocusOptions {\n  /** Whether the browser should scroll to the element when it is focused. */\n  preventScroll?: boolean;\n}\n\n\ntype MonitoredElementInfo = {\n  unlisten: Function,\n  checkChildren: boolean,\n  subject: Subject<FocusOrigin>\n};\n\n\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\n@Injectable({providedIn: 'root'})\nexport class FocusMonitor implements OnDestroy {\n  /** The focus origin that the next focus event is a result of. */\n  private _origin: FocusOrigin = null;\n\n  /** The FocusOrigin of the last focus event tracked by the FocusMonitor. */\n  private _lastFocusOrigin: FocusOrigin;\n\n  /** Whether the window has just been focused. */\n  private _windowFocused = false;\n\n  /** The target of the last touch event. */\n  private _lastTouchTarget: EventTarget | null;\n\n  /** The timeout id of the touch timeout, used to cancel timeout later. */\n  private _touchTimeoutId: number;\n\n  /** The timeout id of the window focus timeout. */\n  private _windowFocusTimeoutId: number;\n\n  /** The timeout id of the origin clearing timeout. */\n  private _originTimeoutId: number;\n\n  /** Map of elements being monitored to their info. */\n  private _elementInfo = new Map<HTMLElement, MonitoredElementInfo>();\n\n  /** A map of global objects to lists of current listeners. */\n  private _unregisterGlobalListeners = () => {};\n\n  /** The number of elements currently being monitored. */\n  private _monitoredElementCount = 0;\n\n  constructor(private _ngZone: NgZone, private _platform: Platform) {}\n\n  /**\n   * Monitors focus on an element and applies appropriate CSS classes.\n   * @param element The element to monitor\n   * @param checkChildren Whether to count the element as focused when its children are focused.\n   * @returns An observable that emits when the focus state of the element changes.\n   *     When the element is blurred, null will be emitted.\n   */\n  monitor(element: HTMLElement, checkChildren?: boolean): Observable<FocusOrigin>;\n\n  /**\n   * Monitors focus on an element and applies appropriate CSS classes.\n   * @param element The element to monitor\n   * @param checkChildren Whether to count the element as focused when its children are focused.\n   * @returns An observable that emits when the focus state of the element changes.\n   *     When the element is blurred, null will be emitted.\n   */\n  monitor(element: ElementRef<HTMLElement>, checkChildren?: boolean): Observable<FocusOrigin>;\n\n  monitor(element: HTMLElement | ElementRef<HTMLElement>,\n          checkChildren: boolean = false): Observable<FocusOrigin> {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return observableOf(null);\n    }\n\n    const nativeElement = this._getNativeElement(element);\n\n    // Check if we're already monitoring this element.\n    if (this._elementInfo.has(nativeElement)) {\n      let cachedInfo = this._elementInfo.get(nativeElement);\n      cachedInfo!.checkChildren = checkChildren;\n      return cachedInfo!.subject.asObservable();\n    }\n\n    // Create monitored element info.\n    let info: MonitoredElementInfo = {\n      unlisten: () => {},\n      checkChildren: checkChildren,\n      subject: new Subject<FocusOrigin>()\n    };\n    this._elementInfo.set(nativeElement, info);\n    this._incrementMonitoredElementCount();\n\n    // Start listening. We need to listen in capture phase since focus events don't bubble.\n    let focusListener = (event: FocusEvent) => this._onFocus(event, nativeElement);\n    let blurListener = (event: FocusEvent) => this._onBlur(event, nativeElement);\n    this._ngZone.runOutsideAngular(() => {\n      nativeElement.addEventListener('focus', focusListener, true);\n      nativeElement.addEventListener('blur', blurListener, true);\n    });\n\n    // Create an unlisten function for later.\n    info.unlisten = () => {\n      nativeElement.removeEventListener('focus', focusListener, true);\n      nativeElement.removeEventListener('blur', blurListener, true);\n    };\n\n    return info.subject.asObservable();\n  }\n\n  /**\n   * Stops monitoring an element and removes all focus classes.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: HTMLElement): void;\n\n  /**\n   * Stops monitoring an element and removes all focus classes.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: ElementRef<HTMLElement>): void;\n\n  stopMonitoring(element: HTMLElement | ElementRef<HTMLElement>): void {\n    const nativeElement = this._getNativeElement(element);\n    const elementInfo = this._elementInfo.get(nativeElement);\n\n    if (elementInfo) {\n      elementInfo.unlisten();\n      elementInfo.subject.complete();\n\n      this._setClasses(nativeElement);\n      this._elementInfo.delete(nativeElement);\n      this._decrementMonitoredElementCount();\n    }\n  }\n\n  /**\n   * Focuses the element via the specified focus origin.\n   * @param element Element to focus.\n   * @param origin Focus origin.\n   * @param options Options that can be used to configure the focus behavior.\n   */\n  focusVia(element: HTMLElement, origin: FocusOrigin, options?: FocusOptions): void;\n\n  /**\n   * Focuses the element via the specified focus origin.\n   * @param element Element to focus.\n   * @param origin Focus origin.\n   * @param options Options that can be used to configure the focus behavior.\n   */\n  focusVia(element: ElementRef<HTMLElement>, origin: FocusOrigin, options?: FocusOptions): void;\n\n  focusVia(element: HTMLElement | ElementRef<HTMLElement>,\n          origin: FocusOrigin,\n          options?: FocusOptions): void {\n\n    const nativeElement = this._getNativeElement(element);\n\n    this._setOriginForCurrentEventQueue(origin);\n\n    // `focus` isn't available on the server\n    if (typeof nativeElement.focus === 'function') {\n      // Cast the element to `any`, because the TS typings don't have the `options` parameter yet.\n      (nativeElement as any).focus(options);\n    }\n  }\n\n  ngOnDestroy() {\n    this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n  }\n\n  /** Register necessary event listeners on the document and window. */\n  private _registerGlobalListeners() {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return;\n    }\n\n    // On keydown record the origin and clear any touch event that may be in progress.\n    let documentKeydownListener = () => {\n      this._lastTouchTarget = null;\n      this._setOriginForCurrentEventQueue('keyboard');\n    };\n\n    // On mousedown record the origin only if there is not touch target, since a mousedown can\n    // happen as a result of a touch event.\n    let documentMousedownListener = () => {\n      if (!this._lastTouchTarget) {\n        this._setOriginForCurrentEventQueue('mouse');\n      }\n    };\n\n    // When the touchstart event fires the focus event is not yet in the event queue. This means\n    // we can't rely on the trick used above (setting timeout of 1ms). Instead we wait 650ms to\n    // see if a focus happens.\n    let documentTouchstartListener = (event: TouchEvent) => {\n      if (this._touchTimeoutId != null) {\n        clearTimeout(this._touchTimeoutId);\n      }\n      this._lastTouchTarget = event.target;\n      this._touchTimeoutId = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n    };\n\n    // Make a note of when the window regains focus, so we can restore the origin info for the\n    // focused element.\n    let windowFocusListener = () => {\n      this._windowFocused = true;\n      this._windowFocusTimeoutId = setTimeout(() => this._windowFocused = false);\n    };\n\n    // Event listener options that enable capturing and also mark the the listener as passive\n    // if the browser supports it.\n    const captureEventListenerOptions = normalizePassiveListenerOptions({\n      passive: true,\n      capture: true\n    });\n\n    // Note: we listen to events in the capture phase so we can detect them even if the user stops\n    // propagation.\n    this._ngZone.runOutsideAngular(() => {\n      document.addEventListener('keydown', documentKeydownListener, captureEventListenerOptions);\n      document.addEventListener('mousedown', documentMousedownListener,\n        captureEventListenerOptions);\n      document.addEventListener('touchstart', documentTouchstartListener,\n        captureEventListenerOptions);\n      window.addEventListener('focus', windowFocusListener);\n    });\n\n    this._unregisterGlobalListeners = () => {\n      document.removeEventListener('keydown', documentKeydownListener, captureEventListenerOptions);\n      document.removeEventListener('mousedown', documentMousedownListener,\n        captureEventListenerOptions);\n      document.removeEventListener('touchstart', documentTouchstartListener,\n        captureEventListenerOptions);\n      window.removeEventListener('focus', windowFocusListener);\n\n      // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n      clearTimeout(this._windowFocusTimeoutId);\n      clearTimeout(this._touchTimeoutId);\n      clearTimeout(this._originTimeoutId);\n    };\n  }\n\n  private _toggleClass(element: Element, className: string, shouldSet: boolean) {\n    if (shouldSet) {\n      element.classList.add(className);\n    } else {\n      element.classList.remove(className);\n    }\n  }\n\n  /**\n   * Sets the focus classes on the element based on the given focus origin.\n   * @param element The element to update the classes on.\n   * @param origin The focus origin.\n   */\n  private _setClasses(element: HTMLElement, origin?: FocusOrigin): void {\n    const elementInfo = this._elementInfo.get(element);\n\n    if (elementInfo) {\n      this._toggleClass(element, 'cdk-focused', !!origin);\n      this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n      this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n      this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n      this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n    }\n  }\n\n  /**\n   * Sets the origin and schedules an async function to clear it at the end of the event queue.\n   * @param origin The origin to set.\n   */\n  private _setOriginForCurrentEventQueue(origin: FocusOrigin): void {\n    this._ngZone.runOutsideAngular(() => {\n      this._origin = origin;\n      // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*\n      // tick after the interaction event fired. To ensure the focus origin is always correct,\n      // the focus origin will be determined at the beginning of the next tick.\n      this._originTimeoutId = setTimeout(() => this._origin = null, 1);\n    });\n  }\n\n  /**\n   * Checks whether the given focus event was caused by a touchstart event.\n   * @param event The focus event to check.\n   * @returns Whether the event was caused by a touch.\n   */\n  private _wasCausedByTouch(event: FocusEvent): boolean {\n    // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n    // Consider the following dom structure:\n    //\n    // <div #parent tabindex=\"0\" cdkFocusClasses>\n    //   <div #child (click)=\"#parent.focus()\"></div>\n    // </div>\n    //\n    // If the user touches the #child element and the #parent is programmatically focused as a\n    // result, this code will still consider it to have been caused by the touch event and will\n    // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n    // relatively small edge-case that can be worked around by using\n    // focusVia(parentEl, 'program') to focus the parent element.\n    //\n    // If we decide that we absolutely must handle this case correctly, we can do so by listening\n    // for the first focus event after the touchstart, and then the first blur event after that\n    // focus event. When that blur event fires we know that whatever follows is not a result of the\n    // touchstart.\n    let focusTarget = event.target;\n    return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n        (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n  }\n\n  /**\n   * Handles focus events on a registered element.\n   * @param event The focus event.\n   * @param element The monitored element.\n   */\n  private _onFocus(event: FocusEvent, element: HTMLElement) {\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n    // focus event affecting the monitored element. If we want to use the origin of the first event\n    // instead we should check for the cdk-focused class here and return if the element already has\n    // it. (This only matters for elements that have includesChildren = true).\n\n    // If we are not counting child-element-focus as focused, make sure that the event target is the\n    // monitored element itself.\n    const elementInfo = this._elementInfo.get(element);\n    if (!elementInfo || (!elementInfo.checkChildren && element !== event.target)) {\n      return;\n    }\n\n    // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n    // 1) The window has just regained focus, in which case we want to restore the focused state of\n    //    the element from before the window blurred.\n    // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n    // 3) The element was programmatically focused, in which case we should mark the origin as\n    //    'program'.\n    let origin = this._origin;\n    if (!origin) {\n      if (this._windowFocused && this._lastFocusOrigin) {\n        origin = this._lastFocusOrigin;\n      } else if (this._wasCausedByTouch(event)) {\n        origin = 'touch';\n      } else {\n        origin = 'program';\n      }\n    }\n\n    this._setClasses(element, origin);\n    this._emitOrigin(elementInfo.subject, origin);\n    this._lastFocusOrigin = origin;\n  }\n\n  /**\n   * Handles blur events on a registered element.\n   * @param event The blur event.\n   * @param element The monitored element.\n   */\n  _onBlur(event: FocusEvent, element: HTMLElement) {\n    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n    // order to focus another child of the monitored element.\n    const elementInfo = this._elementInfo.get(element);\n\n    if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&\n        element.contains(event.relatedTarget))) {\n      return;\n    }\n\n    this._setClasses(element);\n    this._emitOrigin(elementInfo.subject, null);\n  }\n\n  private _emitOrigin(subject: Subject<FocusOrigin>, origin: FocusOrigin) {\n    this._ngZone.run(() => subject.next(origin));\n  }\n\n  private _incrementMonitoredElementCount() {\n    // Register global listeners when first element is monitored.\n    if (++this._monitoredElementCount == 1) {\n      this._registerGlobalListeners();\n    }\n  }\n\n  private _decrementMonitoredElementCount() {\n    // Unregister global listeners when last element is unmonitored.\n    if (!--this._monitoredElementCount) {\n      this._unregisterGlobalListeners();\n      this._unregisterGlobalListeners = () => {};\n    }\n  }\n\n  private _getNativeElement(element: HTMLElement | ElementRef<HTMLElement>): HTMLElement {\n    return element instanceof ElementRef ? element.nativeElement : element;\n  }\n}\n\n\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\n@Directive({\n  selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n})\nexport class CdkMonitorFocus implements OnDestroy {\n  private _monitorSubscription: Subscription;\n  @Output() cdkFocusChange = new EventEmitter<FocusOrigin>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _focusMonitor: FocusMonitor) {\n    this._monitorSubscription = this._focusMonitor.monitor(\n        this._elementRef,\n        this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\n        .subscribe(origin => this.cdkFocusChange.emit(origin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._monitorSubscription.unsubscribe();\n  }\n}\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport function FOCUS_MONITOR_PROVIDER_FACTORY(\n    parentDispatcher: FocusMonitor, ngZone: NgZone, platform: Platform) {\n  return parentDispatcher || new FocusMonitor(ngZone, platform);\n}\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport const FOCUS_MONITOR_PROVIDER = {\n  // If there is already a FocusMonitor available, use that. Otherwise, provide a new one.\n  provide: FocusMonitor,\n  deps: [[new Optional(), new SkipSelf(), FocusMonitor], NgZone, Platform],\n  useFactory: FOCUS_MONITOR_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Screenreaders will often fire fake mousedown events when a focusable element\n * is activated using the keyboard. We can typically distinguish between these faked\n * mousedown events and real mousedown events using the \"buttons\" property. While\n * real mousedowns will indicate the mouse button that was pressed (e.g. \"1\" for\n * the left mouse button), faked mousedowns will usually set the property value to 0.\n */\nexport function isFakeMousedownFromScreenReader(event: MouseEvent): boolean {\n  return event.buttons === 0;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {\n  UP_ARROW,\n  DOWN_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  TAB,\n  A,\n  Z,\n  ZERO,\n  NINE,\n} from '@angular/cdk/keycodes';\nimport {debounceTime, filter, map, tap} from 'rxjs/operators';\n\n/** This interface is for items that can be passed to a ListKeyManager. */\nexport interface ListKeyManagerOption {\n  /** Whether the option is disabled. */\n  disabled?: boolean;\n\n  /** Gets the label for this option. */\n  getLabel?(): string;\n}\n\n/** Modifier keys handled by the ListKeyManager. */\nexport type ListKeyManagerModifierKey = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey';\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends ListKeyManagerOption> {\n  private _activeItemIndex = -1;\n  private _activeItem: T;\n  private _wrap = false;\n  private _letterKeyStream = new Subject<string>();\n  private _typeaheadSubscription = Subscription.EMPTY;\n  private _vertical = true;\n  private _horizontal: 'ltr' | 'rtl' | null;\n  private _allowedModifierKeys: ListKeyManagerModifierKey[] = [];\n\n  /**\n   * Predicate function that can be used to check whether an item should be skipped\n   * by the key manager. By default, disabled items are skipped.\n   */\n  private _skipPredicateFn = (item: T) => item.disabled;\n\n  // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n  private _pressedLetters: string[] = [];\n\n  constructor(private _items: QueryList<T> | T[]) {\n    // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n    if (_items instanceof QueryList) {\n      _items.changes.subscribe((newItems: QueryList<T>) => {\n        if (this._activeItem) {\n          const itemArray = newItems.toArray();\n          const newIndex = itemArray.indexOf(this._activeItem);\n\n          if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n            this._activeItemIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Stream that emits any time the TAB key is pressed, so components can react\n   * when focus is shifted off of the list.\n   */\n  tabOut: Subject<void> = new Subject<void>();\n\n  /** Stream that emits whenever the active item of the list manager changes. */\n  change = new Subject<number>();\n\n  /**\n   * Sets the predicate function that determines which items should be skipped by the\n   * list key manager.\n   * @param predicate Function that determines whether the given item should be skipped.\n   */\n  skipPredicate(predicate: (item: T) => boolean): this {\n    this._skipPredicateFn = predicate;\n    return this;\n  }\n\n  /**\n   * Configures wrapping mode, which determines whether the active item will wrap to\n   * the other end of list when there are no more items in the given direction.\n   * @param shouldWrap Whether the list should wrap when reaching the end.\n   */\n  withWrap(shouldWrap = true): this {\n    this._wrap = shouldWrap;\n    return this;\n  }\n\n  /**\n   * Configures whether the key manager should be able to move the selection vertically.\n   * @param enabled Whether vertical selection should be enabled.\n   */\n  withVerticalOrientation(enabled: boolean = true): this {\n    this._vertical = enabled;\n    return this;\n  }\n\n  /**\n   * Configures the key manager to move the selection horizontally.\n   * Passing in `null` will disable horizontal movement.\n   * @param direction Direction in which the selection can be moved.\n   */\n  withHorizontalOrientation(direction: 'ltr' | 'rtl' | null): this {\n    this._horizontal = direction;\n    return this;\n  }\n\n  /**\n   * Modifier keys which are allowed to be held down and whose default actions will be prevented\n   * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n   */\n  withAllowedModifierKeys(keys: ListKeyManagerModifierKey[]): this {\n    this._allowedModifierKeys = keys;\n    return this;\n  }\n\n  /**\n   * Turns on typeahead mode which allows users to set the active item by typing.\n   * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n   */\n  withTypeAhead(debounceInterval: number = 200): this {\n    if (this._items.length && this._items.some(item => typeof item.getLabel !== 'function')) {\n      throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n    }\n\n    this._typeaheadSubscription.unsubscribe();\n\n    // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n    // and convert those letters back into a string. Afterwards find the first item that starts\n    // with that string and select it.\n    this._typeaheadSubscription = this._letterKeyStream.pipe(\n      tap(keyCode => this._pressedLetters.push(keyCode)),\n      debounceTime(debounceInterval),\n      filter(() => this._pressedLetters.length > 0),\n      map(() => this._pressedLetters.join(''))\n    ).subscribe(inputString => {\n      const items = this._getItemsArray();\n\n      // Start at 1 because we want to start searching at the item immediately\n      // following the current active item.\n      for (let i = 1; i < items.length + 1; i++) {\n        const index = (this._activeItemIndex + i) % items.length;\n        const item = items[index];\n\n        if (!this._skipPredicateFn(item) &&\n            item.getLabel!().toUpperCase().trim().indexOf(inputString) === 0) {\n\n          this.setActiveItem(index);\n          break;\n        }\n      }\n\n      this._pressedLetters = [];\n    });\n\n    return this;\n  }\n\n  /**\n   * Sets the active item to the item at the index specified.\n   * @param index The index of the item to be set as active.\n   */\n  setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the specified item.\n   * @param item The item to be set as active.\n   */\n  setActiveItem(item: T): void;\n\n  setActiveItem(item: any): void {\n    const previousIndex = this._activeItemIndex;\n\n    this.updateActiveItem(item);\n\n    if (this._activeItemIndex !== previousIndex) {\n      this.change.next(this._activeItemIndex);\n    }\n  }\n\n  /**\n   * Sets the active item depending on the key event passed in.\n   * @param event Keyboard event to be used for determining which element should be active.\n   */\n  onKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const modifiers: ListKeyManagerModifierKey[] = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n    const isModifierAllowed = modifiers.every(modifier => {\n      return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n    });\n\n    switch (keyCode) {\n      case TAB:\n        this.tabOut.next();\n        return;\n\n      case DOWN_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case UP_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case RIGHT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case LEFT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      default:\n        // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n        // otherwise fall back to resolving alphanumeric characters via the keyCode.\n        if (event.key && event.key.length === 1) {\n          this._letterKeyStream.next(event.key.toLocaleUpperCase());\n        } else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n          this._letterKeyStream.next(String.fromCharCode(keyCode));\n        }\n\n        // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n        return;\n    }\n\n    this._pressedLetters = [];\n    event.preventDefault();\n  }\n\n  /** Index of the currently active item. */\n  get activeItemIndex(): number | null {\n    return this._activeItemIndex;\n  }\n\n  /** The active item. */\n  get activeItem(): T | null {\n    return this._activeItem;\n  }\n\n  /** Sets the active item to the first enabled item in the list. */\n  setFirstItemActive(): void {\n    this._setActiveItemByIndex(0, 1);\n  }\n\n  /** Sets the active item to the last enabled item in the list. */\n  setLastItemActive(): void {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n\n  /** Sets the active item to the next enabled item in the list. */\n  setNextItemActive(): void {\n    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n\n  /** Sets the active item to a previous enabled item in the list. */\n  setPreviousItemActive(): void {\n    this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive()\n                                            : this._setActiveItemByDelta(-1);\n  }\n\n  /**\n   * Allows setting the active without any other effects.\n   * @param index Index of the item to be set as active.\n   */\n  updateActiveItem(index: number): void;\n\n  /**\n   * Allows setting the active item without any other effects.\n   * @param item Item to be set as active.\n   */\n  updateActiveItem(item: T): void;\n\n  updateActiveItem(item: any): void {\n    const itemArray = this._getItemsArray();\n    const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n\n    this._activeItemIndex = index;\n    this._activeItem = itemArray[index];\n  }\n\n  /**\n   * Allows setting of the activeItemIndex without any other effects.\n   * @param index The new activeItemIndex.\n   * @deprecated Use `updateActiveItem` instead.\n   * @breaking-change 8.0.0\n   */\n  updateActiveItemIndex(index: number): void {\n    this.updateActiveItem(index);\n  }\n\n  /**\n   * This method sets the active item, given a list of items and the delta between the\n   * currently active item and the new active item. It will calculate differently\n   * depending on whether wrap mode is turned on.\n   */\n  private _setActiveItemByDelta(delta: -1 | 1): void {\n    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n  }\n\n  /**\n   * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n   * down the list until it finds an item that is not disabled, and it will wrap if it\n   * encounters either end of the list.\n   */\n  private _setActiveInWrapMode(delta: -1 | 1): void {\n    const items = this._getItemsArray();\n\n    for (let i = 1; i <= items.length; i++) {\n      const index = (this._activeItemIndex + (delta * i) + items.length) % items.length;\n      const item = items[index];\n\n      if (!this._skipPredicateFn(item)) {\n        this.setActiveItem(index);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Sets the active item properly given the default mode. In other words, it will\n   * continue to move down the list until it finds an item that is not disabled. If\n   * it encounters either end of the list, it will stop and not wrap.\n   */\n  private _setActiveInDefaultMode(delta: -1 | 1): void {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n  }\n\n  /**\n   * Sets the active item to the first enabled item starting at the index specified. If the\n   * item is disabled, it will move in the fallbackDelta direction until it either\n   * finds an enabled item or encounters the end of the list.\n   */\n  private _setActiveItemByIndex(index: number, fallbackDelta: -1 | 1): void {\n    const items = this._getItemsArray();\n\n    if (!items[index]) {\n      return;\n    }\n\n    while (this._skipPredicateFn(items[index])) {\n      index += fallbackDelta;\n\n      if (!items[index]) {\n        return;\n      }\n    }\n\n    this.setActiveItem(index);\n  }\n\n  /** Returns the items as an array. */\n  private _getItemsArray(): T[] {\n    return this._items instanceof QueryList ? this._items.toArray() : this._items;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\nexport interface Highlightable extends ListKeyManagerOption {\n  /** Applies the styles for an active item to this item. */\n  setActiveStyles(): void;\n\n  /** Applies the styles for an inactive item to this item. */\n  setInactiveStyles(): void;\n}\n\nexport class ActiveDescendantKeyManager<T> extends ListKeyManager<Highlightable & T> {\n\n  /**\n   * Sets the active item to the item at the specified index and adds the\n   * active styles to the newly active item. Also removes active styles\n   * from the previously active item.\n   * @param index Index of the item to be set as active.\n   */\n  setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the item to the specified one and adds the\n   * active styles to the it. Also removes active styles from the\n   * previously active item.\n   * @param item Item to be set as active.\n   */\n  setActiveItem(item: T): void;\n\n  setActiveItem(index: any): void {\n    if (this.activeItem) {\n      this.activeItem.setInactiveStyles();\n    }\n    super.setActiveItem(index);\n    if (this.activeItem) {\n      this.activeItem.setActiveStyles();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\nimport {FocusOrigin} from '../focus-monitor/focus-monitor';\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself, whether or not it is currently disabled\n * and be able to supply it's label.\n */\nexport interface FocusableOption extends ListKeyManagerOption {\n  /** Focuses the `FocusableOption`. */\n  focus(origin?: FocusOrigin): void;\n}\n\nexport class FocusKeyManager<T> extends ListKeyManager<FocusableOption & T> {\n  private _origin: FocusOrigin = 'program';\n\n  /**\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n   * @param origin Focus origin to be used when focusing items.\n   */\n  setFocusOrigin(origin: FocusOrigin): this {\n    this._origin = origin;\n    return this;\n  }\n\n  /**\n   * Sets the active item to the item at the specified\n   * index and focuses the newly active item.\n   * @param index Index of the item to be set as active.\n   */\n  setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the item that is specified and focuses it.\n   * @param item Item to be set as active.\n   */\n  setActiveItem(item: T): void;\n\n  setActiveItem(item: any): void {\n    super.setActiveItem(item);\n\n    if (this.activeItem) {\n      this.activeItem.focus(this._origin);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  Inject,\n  Injectable,\n  Input,\n  NgZone,\n  OnDestroy,\n  DoCheck,\n  isDevMode,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\nimport {InteractivityChecker} from '../interactivity-checker/interactivity-checker';\n\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause to two to misalign.\n */\nexport class FocusTrap {\n  private _startAnchor: HTMLElement | null;\n  private _endAnchor: HTMLElement | null;\n  private _hasAttached = false;\n\n  /** Whether the focus trap is active. */\n  get enabled(): boolean { return this._enabled; }\n  set enabled(value: boolean) {\n    this._enabled = value;\n\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(value, this._startAnchor);\n      this._toggleAnchorTabIndex(value, this._endAnchor);\n    }\n  }\n  private _enabled: boolean = true;\n\n  constructor(\n    private _element: HTMLElement,\n    private _checker: InteractivityChecker,\n    private _ngZone: NgZone,\n    private _document: Document,\n    deferAnchors = false) {\n\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n\n  /** Destroys the focus trap by cleaning up the anchors. */\n  destroy() {\n    if (this._startAnchor && this._startAnchor.parentNode) {\n      this._startAnchor.parentNode.removeChild(this._startAnchor);\n    }\n\n    if (this._endAnchor && this._endAnchor.parentNode) {\n      this._endAnchor.parentNode.removeChild(this._endAnchor);\n    }\n\n    this._startAnchor = this._endAnchor = null;\n  }\n\n  /**\n   * Inserts the anchors into the DOM. This is usually done automatically\n   * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n   * @returns Whether the focus trap managed to attach successfuly. This may not be the case\n   * if the target element isn't currently in the DOM.\n   */\n  attachAnchors(): boolean {\n    // If we're not on the browser, there can be no focus to trap.\n    if (this._hasAttached) {\n      return true;\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      if (!this._startAnchor) {\n        this._startAnchor = this._createAnchor();\n        this._startAnchor!.addEventListener('focus', () => this.focusLastTabbableElement());\n      }\n\n      if (!this._endAnchor) {\n        this._endAnchor = this._createAnchor();\n        this._endAnchor!.addEventListener('focus', () => this.focusFirstTabbableElement());\n      }\n    });\n\n    if (this._element.parentNode) {\n      this._element.parentNode.insertBefore(this._startAnchor!, this._element);\n      this._element.parentNode.insertBefore(this._endAnchor!, this._element.nextSibling);\n      this._hasAttached = true;\n    }\n\n    return this._hasAttached;\n  }\n\n  /**\n   * Waits for the zone to stabilize, then either focuses the first element that the\n   * user specified, or the first tabbable element.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfuly.\n   */\n  focusInitialElementWhenReady(): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusInitialElement()));\n    });\n  }\n\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the first tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfuly.\n   */\n  focusFirstTabbableElementWhenReady(): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusFirstTabbableElement()));\n    });\n  }\n\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the last tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfuly.\n   */\n  focusLastTabbableElementWhenReady(): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusLastTabbableElement()));\n    });\n  }\n\n  /**\n   * Get the specified boundary element of the trapped region.\n   * @param bound The boundary to get (start or end of trapped region).\n   * @returns The boundary element.\n   */\n  private _getRegionBoundary(bound: 'start' | 'end'): HTMLElement | null {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    let markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` +\n                                                 `[cdkFocusRegion${bound}], ` +\n                                                 `[cdk-focus-${bound}]`) as NodeListOf<HTMLElement>;\n\n    for (let i = 0; i < markers.length; i++) {\n      // @breaking-change 8.0.0\n      if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` +\n                     `use 'cdkFocusRegion${bound}' instead. The deprecated ` +\n                     `attribute will be removed in 8.0.0.`, markers[i]);\n      } else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` +\n                     `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` +\n                     `will be removed in 8.0.0.`, markers[i]);\n      }\n    }\n\n    if (bound == 'start') {\n      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n    }\n    return markers.length ?\n        markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n  }\n\n  /**\n   * Focuses the element that should be focused when the focus trap is initialized.\n   * @returns Whether focus was moved successfuly.\n   */\n  focusInitialElement(): boolean {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    const redirectToElement = this._element.querySelector(`[cdk-focus-initial], ` +\n                                                          `[cdkFocusInitial]`) as HTMLElement;\n\n    if (redirectToElement) {\n      // @breaking-change 8.0.0\n      if (redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` +\n                    `use 'cdkFocusInitial' instead. The deprecated attribute ` +\n                    `will be removed in 8.0.0`, redirectToElement);\n      }\n\n      // Warn the consumer if the element they've pointed to\n      // isn't focusable, when not in production mode.\n      if (isDevMode() && !this._checker.isFocusable(redirectToElement)) {\n        console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\n      }\n\n      redirectToElement.focus();\n      return true;\n    }\n\n    return this.focusFirstTabbableElement();\n  }\n\n  /**\n   * Focuses the first tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfuly.\n   */\n  focusFirstTabbableElement(): boolean {\n    const redirectToElement = this._getRegionBoundary('start');\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n\n    return !!redirectToElement;\n  }\n\n  /**\n   * Focuses the last tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfuly.\n   */\n  focusLastTabbableElement(): boolean {\n    const redirectToElement = this._getRegionBoundary('end');\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n\n    return !!redirectToElement;\n  }\n\n  /**\n   * Checks whether the focus trap has successfuly been attached.\n   */\n  hasAttached(): boolean {\n    return this._hasAttached;\n  }\n\n  /** Get the first tabbable element from a DOM subtree (inclusive). */\n  private _getFirstTabbableElement(root: HTMLElement): HTMLElement | null {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n    // back to `childNodes` which includes text nodes, comments etc.\n    let children = root.children || root.childNodes;\n\n    for (let i = 0; i < children.length; i++) {\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\n        this._getFirstTabbableElement(children[i] as HTMLElement) :\n        null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n\n  /** Get the last tabbable element from a DOM subtree (inclusive). */\n  private _getLastTabbableElement(root: HTMLElement): HTMLElement | null {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in reverse DOM order.\n    let children = root.children || root.childNodes;\n\n    for (let i = children.length - 1; i >= 0; i--) {\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\n        this._getLastTabbableElement(children[i] as HTMLElement) :\n        null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n\n  /** Creates an anchor element. */\n  private _createAnchor(): HTMLElement {\n    const anchor = this._document.createElement('div');\n    this._toggleAnchorTabIndex(this._enabled, anchor);\n    anchor.classList.add('cdk-visually-hidden');\n    anchor.classList.add('cdk-focus-trap-anchor');\n    return anchor;\n  }\n\n  /**\n   * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n   * @param isEnabled Whether the focus trap is enabled.\n   * @param anchor Anchor on which to toggle the tabindex.\n   */\n  private _toggleAnchorTabIndex(isEnabled: boolean, anchor: HTMLElement) {\n    // Remove the tabindex completely, rather than setting it to -1, because if the\n    // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n    isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n  }\n\n  /** Executes a function when the zone is stable. */\n  private _executeOnStable(fn: () => any): void {\n    if (this._ngZone.isStable) {\n      fn();\n    } else {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(fn);\n    }\n  }\n}\n\n\n/** Factory that allows easy instantiation of focus traps. */\n@Injectable({providedIn: 'root'})\nexport class FocusTrapFactory {\n  private _document: Document;\n\n  constructor(\n      private _checker: InteractivityChecker,\n      private _ngZone: NgZone,\n      @Inject(DOCUMENT) _document: any) {\n\n    this._document = _document;\n  }\n\n  /**\n   * Creates a focus-trapped region around the given element.\n   * @param element The element around which focus will be trapped.\n   * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\n   *     manually by the user.\n   * @returns The created focus trap instance.\n   */\n  create(element: HTMLElement, deferCaptureElements: boolean = false): FocusTrap {\n    return new FocusTrap(\n        element, this._checker, this._ngZone, this._document, deferCaptureElements);\n  }\n}\n\n/** Directive for trapping focus within a region. */\n@Directive({\n  selector: '[cdkTrapFocus]',\n  exportAs: 'cdkTrapFocus',\n})\nexport class CdkTrapFocus implements OnDestroy, AfterContentInit, DoCheck {\n  private _document: Document;\n\n  /** Underlying FocusTrap instance. */\n  focusTrap: FocusTrap;\n\n  /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n  private _previouslyFocusedElement: HTMLElement | null = null;\n\n  /** Whether the focus trap is active. */\n  @Input('cdkTrapFocus')\n  get enabled(): boolean { return this.focusTrap.enabled; }\n  set enabled(value: boolean) { this.focusTrap.enabled = coerceBooleanProperty(value); }\n\n  /**\n   * Whether the directive should automatially move focus into the trapped region upon\n   * initialization and return focus to the previous activeElement upon destruction.\n   */\n  @Input('cdkTrapFocusAutoCapture')\n  get autoCapture(): boolean { return this._autoCapture; }\n  set autoCapture(value: boolean) { this._autoCapture = coerceBooleanProperty(value); }\n  private _autoCapture: boolean;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLElement>,\n      private _focusTrapFactory: FocusTrapFactory,\n      @Inject(DOCUMENT) _document: any) {\n\n    this._document = _document;\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this.focusTrap.destroy();\n\n    // If we stored a previously focused element when using autoCapture, return focus to that\n    // element now that the trapped region is being destroyed.\n    if (this._previouslyFocusedElement) {\n      this._previouslyFocusedElement.focus();\n      this._previouslyFocusedElement = null;\n    }\n  }\n\n  ngAfterContentInit() {\n    this.focusTrap.attachAnchors();\n\n    if (this.autoCapture) {\n      this._previouslyFocusedElement = this._document.activeElement as HTMLElement;\n      this.focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  ngDoCheck() {\n    if (!this.focusTrap.hasAttached()) {\n      this.focusTrap.attachAnchors();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {CdkMonitorFocus} from './focus-monitor/focus-monitor';\nimport {CdkTrapFocus} from './focus-trap/focus-trap';\nimport {CdkAriaLive} from './live-announcer/live-announcer';\n\n@NgModule({\n  imports: [CommonModule, PlatformModule, ObserversModule],\n  declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n  exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n})\nexport class A11yModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","addAriaReferencedId","el","attr","id","ids","getAriaReferenceIds","some","existingId","trim","push","setAttribute","join","ID_DELIMINATOR","removeAriaReferencedId","filteredIds","filter","val","getAttribute","match","ARIA_DESCRIBER_PROVIDER_FACTORY","parentDispatcher","_document","AriaDescriber","getFrameElement","window","_a","hasGeometry","element","offsetWidth","offsetHeight","getClientRects","length","isNativeFormElement","nodeName","toLowerCase","isHiddenInput","isInputElement","type","isAnchorWithHref","isAnchorElement","hasAttribute","hasValidTabIndex","undefined","tabIndex","isNaN","parseInt","getTabIndexValue","isPotentiallyTabbableIOS","inputType","isPotentiallyFocusable","getWindow","node","ownerDocument","defaultView","LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY","LIVE_ANNOUNCER_PROVIDER_FACTORY","parentAnnouncer","liveElement","ngZone","LiveAnnouncer","FOCUS_MONITOR_PROVIDER_FACTORY","platform","FocusMonitor","isFakeMousedownFromScreenReader","event","buttons","setPrototypeOf","__proto__","Array","p","hasOwnProperty","nextId","messageRegistry","Map","messagesContainer","describe","hostElement","message","_canBeDescribed","has","_createMessageElement","_isElementDescribedByMessage","_addMessageReference","removeDescription","_removeMessageReference","registeredMessage","get","referenceCount","_deleteMessageElement","childNodes","_deleteMessagesContainer","ngOnDestroy","describedElements","querySelectorAll","i","_removeCdkDescribedByReferenceIds","removeAttribute","clear","messageElement","createElement","CDK_DESCRIBEDBY_ID_PREFIX","appendChild","createTextNode","_createMessagesContainer","set","removeChild","delete","preExistingContainer","getElementById","style","display","body","parentNode","originalReferenceIds","indexOf","referenceIds","messageId","nodeType","ELEMENT_NODE","Injectable","args","providedIn","decorators","Inject","DOCUMENT","ARIA_DESCRIBER_PROVIDER","provide","deps","Optional","SkipSelf","useFactory","ListKeyManager","_items","_this","_activeItemIndex","_wrap","_letterKeyStream","Subject","_typeaheadSubscription","Subscription","EMPTY","_vertical","_allowedModifierKeys","_skipPredicateFn","item","disabled","_pressedLetters","tabOut","change","QueryList","changes","subscribe","newItems","_activeItem","itemArray","toArray","newIndex","skipPredicate","predicate","withWrap","shouldWrap","withVerticalOrientation","enabled","withHorizontalOrientation","direction","_horizontal","withAllowedModifierKeys","keys","withTypeAhead","debounceInterval","getLabel","Error","unsubscribe","pipe","tap","keyCode","debounceTime","map","inputString","items","_getItemsArray","index","toUpperCase","setActiveItem","previousIndex","updateActiveItem","next","onKeydown","modifiers","isModifierAllowed","every","modifier","TAB","DOWN_ARROW","setNextItemActive","UP_ARROW","setPreviousItemActive","RIGHT_ARROW","LEFT_ARROW","key","toLocaleUpperCase","A","Z","ZERO","NINE","String","fromCharCode","preventDefault","defineProperty","setFirstItemActive","_setActiveItemByIndex","setLastItemActive","_setActiveItemByDelta","updateActiveItemIndex","delta","_setActiveInWrapMode","_setActiveInDefaultMode","fallbackDelta","ActiveDescendantKeyManager","_super","tslib_1.__extends","activeItem","setInactiveStyles","call","setActiveStyles","FocusKeyManager","_origin","setFocusOrigin","origin","focus","InteractivityChecker","_platform","isDisabled","isVisible","getComputedStyle","visibility","isTabbable","isBrowser","frameElement","frameType","BLINK","WEBKIT","tabIndexValue","TRIDENT","FIREFOX","IOS","isFocusable","Platform","FocusTrap","_element","_checker","_ngZone","deferAnchors","_hasAttached","_enabled","attachAnchors","value","_startAnchor","_endAnchor","_toggleAnchorTabIndex","destroy","runOutsideAngular","_createAnchor","addEventListener","focusLastTabbableElement","focusFirstTabbableElement","insertBefore","nextSibling","focusInitialElementWhenReady","Promise","resolve","_executeOnStable","focusInitialElement","focusFirstTabbableElementWhenReady","focusLastTabbableElementWhenReady","_getRegionBoundary","bound","markers","console","warn","_getFirstTabbableElement","_getLastTabbableElement","redirectToElement","querySelector","isDevMode","hasAttached","root","children","tabbableChild","anchor","classList","add","isEnabled","fn","isStable","onStable","asObservable","take","FocusTrapFactory","deferCaptureElements","NgZone","CdkTrapFocus","_elementRef","_focusTrapFactory","_previouslyFocusedElement","focusTrap","nativeElement","coerceBooleanProperty","_autoCapture","ngAfterContentInit","autoCapture","ngDoCheck","Directive","selector","exportAs","ElementRef","Input","LIVE_ANNOUNCER_ELEMENT_TOKEN","InjectionToken","factory","elementToken","_liveElement","_createLiveElement","announce","_i","arguments","politeness","duration","clearTimeout","_previousTimeout","setTimeout","textContent","previousElements","getElementsByClassName","liveEl","CdkAriaLive","_liveAnnouncer","_contentObserver","_politeness","_subscription","observe","elementText","_previousAnnouncedText","ContentObserver","LIVE_ANNOUNCER_PROVIDER","_windowFocused","_elementInfo","_unregisterGlobalListeners","_monitoredElementCount","monitor","checkChildren","observableOf","_getNativeElement","cachedInfo","subject","info","unlisten","_incrementMonitoredElementCount","focusListener","_onFocus","blurListener","_onBlur","removeEventListener","stopMonitoring","elementInfo","complete","_setClasses","_decrementMonitoredElementCount","focusVia","options","_setOriginForCurrentEventQueue","forEach","_info","_registerGlobalListeners","documentKeydownListener","_lastTouchTarget","documentMousedownListener","documentTouchstartListener","_touchTimeoutId","target","windowFocusListener","_windowFocusTimeoutId","captureEventListenerOptions","normalizePassiveListenerOptions","passive","capture","document","_originTimeoutId","_toggleClass","className","shouldSet","remove","_wasCausedByTouch","focusTarget","Node","contains","_lastFocusOrigin","_emitOrigin","relatedTarget","run","CdkMonitorFocus","_focusMonitor","cdkFocusChange","EventEmitter","_monitorSubscription","emit","Output","FOCUS_MONITOR_PROVIDER","NgModule","imports","CommonModule","PlatformModule","ObserversModule","declarations","exports","A11yModule"],"mappings":"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"}